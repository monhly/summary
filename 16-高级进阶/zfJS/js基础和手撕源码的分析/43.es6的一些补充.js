//箭头函数和普通函数的区别:
/**
 * 1.语法更加的简洁,返回值和传参的时候,能够体现
 * 2.箭头函数没有自己的this,它只会在自己作用域的上一层继承this,所以箭头函数中this的指向在它定义
 * 3.箭头函数继承来的this指向永远不会改变
 * 4.call().apply(),bind()方法并不能改变箭头函数的this指向
 * 5.箭头函数不能作为构造函数使用
 * 6.箭头函数没有自己的arguments
 * 7.箭头函数没有prototype
 * 8.箭头函数不能用作generator函数,不能够使用yeild关键字
 * 
 */

//set和map的区别
/*
       set是一种叫做集合的数据结构,类似于数组,但成员是唯一且无序的,没有重复的值;
       set本身是一个构造函数,用来生成set数据结构

       weakSet结构和set类似,也是不重复的值的集合,但是它和set有两个区别
       1.首先是weakSet的成员只能是对象(null除外),而不能是其他类型的值
       2.weakSet中的对象都是弱引用,即垃圾回收机制不考虑weakSet
       对该对象的引用,


       Map:本质上都是键值对的集合,但是传统上只能作为字符串当做键,这样就带了很大的限制
       所以为了解决这个问题,es6提供了Map数据结构,传入的键值不再是只是字符串的形式,更可以是多个值对应值的关系


       weakMap
       weakMap的结构和map结构是类似的,也是用于生成键值对的集合;
       主要区别就是:
       1.weakMap只接受对象作为键名,不接受其他的值作为键名
       2.weakMap的键名所指向的对象,不计入垃圾回收机制

*/


//map和object的区别:
/**
 *1.map的键可以是任意值,包括函数和对象, object的键值必须是string和symbol
  2.map中的key是有序的,map一插入的顺序返回键值, object的键是无序的
  3.键值的个数map可以通过size属性获取, object的个数需要手动的计算
  4.map是iterable的,所以是可以直接迭代的 object需要通过键值才能进行迭代 
 *
 */



//js有哪些内置对象
/**
 * 全局的对象:global objects(标准内置对象)
 *标准内置对象:
 1.值属性
 2.函数属性
 3.基本对象
 4.数字和日期对象
 5.字符串/正则:String,RegExp
 6.可索引的集合对象:Array
 7.使用键的集合对象:Map
 8.矢量集合:SIMD
 9.结构化数据:json
 10.反射:proxy
 11.promise
 */


//js脚本延迟加载:
/**
 * defer: 会让脚本的加载和文档的解析同步解析,然后在文档解析完成以后在执行这个脚本的文件,
 *  defer的脚本是按照顺序进行执行的
 * 
 * async:当脚本执行完成后再去执行js脚本,这个时候如果文档没有解析完毕的话,同样会进行阻塞,多个async的脚本执行顺序是不可预测的
 * 
 * 动态创建DOM 动态创建script脚本来引入js
 * 
 * 使用定时器延迟
 * 
 * js脚本放在底部
 */


//原码 补码  反码 计算机执行的时候是按照补码执行的
// 原码是一个数的二进制 如10的原码是0000 1010 0000表示当前的数是正数,1111则表示当前的数是负数

//反码
//正数的反码和原码是相同的



//补码
//正数的补码和原码是相同的




//for of 和 for in的区别
/**
 * forof允许遍历一个含有iterator接口的数据结构(数组/对象)
 * 1.for of 遍历获取的是对象的键值, forin获取的是对象的键名
 * 2.for in 会遍历对象的整个原型链, forof只遍历当前对象不会遍历原型链
 * 3.forof 遍历数组的时候会返回对应下标的属性值 for in 会返回数组中所有可枚举的属性
 */