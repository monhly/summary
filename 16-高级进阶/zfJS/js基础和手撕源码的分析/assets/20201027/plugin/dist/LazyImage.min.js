(()=>{var t={138:t=>{!function(){function e(t){t=t||{};let o={context:document,attr:"lazy-image",threshold:1,speed:300,callback:Function.prototype};return new e.prototype.init(Object.assign(o,t))}e.prototype={constructor:e,init:function(t){this.config=t,this.imageBoxList=[];const e={threshold:[t.threshold]};this.ob=new IntersectionObserver((t=>{t.forEach((t=>{let{isIntersecting:e,target:o}=t;e&&(this.singleHandle(o),this.ob.unobserve(o))}))}),e),this.observeAll()},singleHandle:function(t){let e=this.config,o=t.querySelector("img"),i=o.getAttribute(e.attr);o.src=i,o.removeAttribute(e.attr),o.onload=()=>{o.style.transition=`opacity ${e.speed}ms`,o.style.opacity=1,e.callback.call(this,o)}},observeAll(t){let e=this.config,o=e.context.querySelectorAll(`img[${e.attr}]`);[].forEach.call(o,(e=>{let o=e.parentNode;t&&this.imageBoxList.includes(o)||(this.imageBoxList.push(o),this.ob.observe(o))}))},refresh:function(){this.observeAll(!0)}},e.prototype.init.prototype=e.prototype,"undefined"!=typeof window&&(window.LazyImage=e),"object"==typeof t.exports&&(t.exports=e)}()}},e={};!function o(i){if(e[i])return e[i].exports;var r=e[i]={exports:{}};return t[i](r,r.exports,o),r.exports}(138)})();