珠峰Web高级正式课「试听课」
「JS进阶:从零开始打造专业的“图片延迟加载组件”」
 1.图片延迟加载的意义和N种实现方案
 2.封装一款专业的插件组件所要考虑的事项
 3.插件组件封装中的config配置项处理方案
 4.完成“图片延迟加载组件”的封装和性能优化

 时间：20:00 ~ 22:00

-------------------
插件 VS 组件 VS 类库 VS 框架
-------------------
封装插件组件的目的：构建敏捷化开发平台的一个重要环节（实现复用「别人愿意用」）
   + 易用性
       + 调用简单
       + 不需要太多的依赖（最好是零依赖）
       + 各种容错处理和完善的错误提示
       + 详细的说明文档和各种情况的参考DEMO
       + ...
   + 强大
       + 功能强大，项目中常现的效果，基本都可以支持
       + 适配更多的需求
       + 更多的用户自定义扩展(样式/功能)
       + ...
   + 升级及向后兼容（学习成本低）
       + 高性能（性能优化、轻量级「代码少、体积小」）
       + 可维护性（各种设计模式的应用）
       + ...
-------------------
//执行这个方法就可以把页面中需要延迟加载的图片做延迟加载
LazyImage();

//支持自定义配置
//  + context:document 指定上下文
//  + attr:'lazy-image' 具备哪个属性的img需要做延迟加载（属性值是真实图片地址）
//  + threshold:1 完全出现在视口中 0/0.5
//  + speed:300 出现真实图片动画的时间
//  + callback:Function.prototype 图片加载成功后触发的回调函数（img）
//  + ...
// 一个个的传递实参信息：参数传递的顺序、不传递的默认值等都不好控制「参数超过两个的，一般都不用这种方法」
// 按照对象键值对的方式，我们不需要考虑顺序，而且不传递的完全可以使用默认值，我们只需要把自己传递的配置项和默认配置项一合并即可
LazyImage({
    threshold:0.5,
    context:box
});

// 一个页面多次调用，即想实现信息的独立，也想一个方法的公用 -> 面向对象
LazyImage() 应该都是创建一个类（LazyImage）的实例